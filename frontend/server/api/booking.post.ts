export default defineEventHandler(async (event) => {
  const body = await readBody(event)

  const config = useRuntimeConfig()
  const TELEGRAM_BOT_TOKEN = config.telegramBotToken
  const TELEGRAM_CHAT_ID = config.telegramChatId

  if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
    throw createError({
      statusCode: 500,
      statusMessage: 'Telegram configuration missing'
    })
  }

  try {
    const message = formatTelegramMessage(body)

    const response = await $fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      body: {
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML'
      }
    })

    return { success: true, message: 'Booking request sent successfully' }
  } catch (error) {
    console.error('Telegram API error:', error)
    throw createError({
      statusCode: 500,
      statusMessage: 'Failed to send booking request'
    })
  }
})

function formatTelegramMessage(data: any) {
  const privateText = data.isPrivate ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç'
  const parentText = data.isParent ? '‚úÖ –î–∞ (–∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞)' : '‚ùå –ù–µ—Ç'

  const trainingTypes = {
    'boxing': '–ë–æ–∫—Å',
    'kickboxing': '–ö–∏–∫–±–æ–∫—Å–∏–Ω–≥',
    'grappling': '–ì—Ä—ç–ø–ø–ª–∏–Ω–≥',
    'bjj': '–ë–ñ–ñ (–ë—Ä–∞–∑–∏–ª—å—Å–∫–æ–µ –¥–∂–∏—É-–¥–∂–∏—Ç—Å—É)',
    'mma': '–ú–ú–ê',
    'pankration': '–ü–∞–Ω–∫—Ä–∞—Ç–∏–æ–Ω'
  }

  const trainingLabel = trainingTypes[data.trainingType as keyof typeof trainingTypes] || data.trainingType

  const contactIcon = data.contactMethod === 'telegram' ? 'üí¨' : 'üì±'
  const contactLabel = data.contactMethod === 'telegram' ? 'Telegram' : '–¢–µ–ª–µ—Ñ–æ–Ω'

  let message = `ü•ä <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –¢–†–ï–ù–ò–†–û–í–ö–£</b>

üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ${data.isParent ? ' (—Ä–æ–¥–∏—Ç–µ–ª—å)' : ''}:</b>
   –ò–º—è: ${data.firstName} ${data.lastName}
   ${contactIcon} ${contactLabel}: ${data.contact}
   üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${data.age} –ª–µ—Ç

ü•ã <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> ${trainingLabel}
üéØ <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b> ${privateText}
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–ó–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–±—ë–Ω–∫–∞:</b> ${parentText}`

  if (data.isParent && data.childFirstName && data.childLastName) {
    message += `

üë∂ <b>–î–∞–Ω–Ω—ã–µ —Ä–µ–±—ë–Ω–∫–∞:</b>
   –ò–º—è: ${data.childFirstName} ${data.childLastName}
   üéÇ –í–æ–∑—Ä–∞—Å—Ç: ${data.childAge} –ª–µ—Ç`
  }

  if (data.additionalInfo) {
    message += `\n\nüí¨ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b> ${data.additionalInfo}`
  }

  message += `\n\n<i>–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}</i>`

  return message
}